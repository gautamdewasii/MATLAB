% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by Neural Fitting app
% Created 17-Jan-2024 09:30:00
%
% This script assumes these variables are defined:
%
% cleaning the workspace and other environment before training model
clc;
clear;
close all;

%   x - input data.
%   y1 - target data.
% Creating data for model training and testing
x=linspace(0,2*pi,50);
y1=sin(x);

% 'x' is input features
% 't' is target features
x;
t = y1;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Fitting Network
% number of neurons in hidden layers
hiddenLayerSize = 8;

% 'net' is the network fitting , having 8 neurons and trainml algorithms in
% it
net = fitnet(hiddenLayerSize,trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
% it will remove all doublicate and contatnt rows ( like each feature contain same value in it )
% 'mapminmax' is used to scale these input features and output feature values into -1 to +1 range
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
net.divideFcn = 'dividerand';  % Divide data randomly
% 'sample' is for static network
% 'time' is for dynamic nrtwork
% 'sampletime' is for both 
% 'all' to divide up target by every scaler value
% 'none' no divide up data at all, mean all data is for training
 net.divideMode = 'sample';  % Divide up every sample

net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    'plotregression', 'plotfit'};

% Train the Network ( passing input, target and network to it )
% 'tr' contains information about training process
[net,tr] = train(net,x,t);

% Test the Network
% predicted output feature 'y'
y = net(x);
% error = target - predicted
e = gsubtract(t,y);
% return the performance of the model
performance = perform(net,t,y);

% Recalculate Training, Validation and Test Performance
% examples :- isnan(tr.testMask{1}) , return 1 where value is Nan
% examples :- ~isnan(tr.testMask{1}) , return 1 where value is not Nan
% examples :- find(~isnan(tr.testMask{1})) , return indexes where value is not Nan

% tr.trainMask{1} replace all training data with '1' and others with 'Nan'
% t.*tr.train{1} it will return actual values of training data varables
trainTargets = t .* tr.trainMask{1};
% return all data selected for validation 
valTargets = t .* tr.valMask{1};
% data selected for testing
testTargets = t .* tr.testMask{1};
% individual performance for training, testing and validation stage
trainPerformance = perform(net,trainTargets,y);
valPerformance = perform(net,valTargets,y);
testPerformance = perform(net,testTargets,y);

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
% 'figure' used to create new figure window
% 'these plot' function used to plot the performance of neural network
% on the basis of 'tr' training records
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotfit(net,x,t)

% Deployment
% Change the (false) values to (true) to enable the following code blocks.
% See the help for each generation function for more information.
if (true)
    % Generate MATLAB function for neural network for application
    % deployment in MATLAB scripts or with MATLAB Compiler and Builder
    % tools, or simply to examine the calculations your trained neural
    % network performs.
    genFunction(net,'myNeuralNetworkFunction');
    y = myNeuralNetworkFunction(x);
end
if (true)
    % Generate a matrix-only MATLAB function for neural network code
    % generation with MATLAB Coder tools.
    genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a Simulink diagram for simulation or deployment with.
    % Simulink Coder tools.
    gensim(net);
end
